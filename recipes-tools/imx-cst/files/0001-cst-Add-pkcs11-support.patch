From d41ca6a9afdf25c19c0a7f1d9e8ad089b2eeb46b Mon Sep 17 00:00:00 2001
From: Sascha Hauer <s.hauer@pengutronix.de>
Date: Fri, 27 Sep 2019 10:04:18 +0200
Subject: [PATCH] cst: Add pkcs11 support

This adds native pkcs11 support to cst. The pkcs11 uri must be passed in
in environment variables. The csf file will have __ENV__foo where a
filename is expected and then the pkcs11 uri is read from the
environment variable "foo". This is necessary as the binary portion
of the cst tool will mangle all characters that remotely look like
special characters, like ':' and ';'.
The key pass file is read from the environment variable CST_SIGN_PIN
if exists.

Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
---
 code/back_end/src/openssl_helper.c | 85 ++++++++++++++++++++++++++++++
 code/back_end/src/pkey.c           |  4 ++
 2 files changed, 89 insertions(+)

diff --git a/code/back_end/src/openssl_helper.c b/code/back_end/src/openssl_helper.c
index 3a54ac7..2b20a5e 100644
--- a/code/back_end/src/openssl_helper.c
+++ b/code/back_end/src/openssl_helper.c
@@ -35,6 +35,7 @@ without specific written permission from NXP.
 #include <openssl/x509v3.h>
 #include <openssl/pem.h>
 #include <openssl/err.h>
+#include <openssl/engine.h>
 #include "openssl_helper.h"
 #include "version.h"
 #include <openssl/rand.h>
@@ -408,6 +409,48 @@ write_cert_file(const char *filename, const BIO *data)
     return CST_SUCCESS;
 }
 
+static X509*
+read_certificate_pkcs11(const char *uri)
+{
+    char *key_pass;
+    ENGINE *e;
+    struct {
+        const char *url;
+        X509 *cert;
+    } parms = {
+        .url = uri,
+    };
+    int err;
+
+    ENGINE_load_builtin_engines();
+    e = ENGINE_by_id("pkcs11");
+    if (!e)
+    {
+        fprintf(stderr, "Cannot Load PKCS#11 ENGINE\n");
+        return NULL;
+    }
+
+    if (!ENGINE_init(e))
+    {
+        fprintf(stderr, "Cannot ENGINE_init\n");
+        return NULL;
+    }
+
+    key_pass = getenv("CST_SIGN_PIN");
+    if (key_pass)
+        if (!ENGINE_ctrl_cmd_string(e, "PIN", key_pass, 0))
+        {
+            fprintf(stderr, "Cannot Set PKCS#11 PIN\n");
+            return NULL;
+        }
+
+    err = ENGINE_ctrl_cmd(e, "LOAD_CERT_CTRL", 0, &parms, NULL, 0);
+    if (!err || !parms.cert)
+        fprintf(stderr, "Cannot Load certificate\n");
+
+    return parms.cert;
+}
+
 /*--------------------------
   read_certificate
 ---------------------------*/
@@ -427,6 +470,13 @@ read_certificate(const char* filename)
         return NULL;
     }
 
+    if (!strncmp(filename, "__ENV__", 7))
+        filename = getenv(filename + 7);
+
+    if (!strncmp(filename, "pkcs11:", 7))
+    {
+        return read_certificate_pkcs11(filename);
+    } else
     /* PEM encoded */
     if (!strncasecmp(temp, PEM_FILE_EXTENSION, PEM_FILE_EXTENSION_BYTES))
     {
@@ -482,6 +532,36 @@ int32_t get_der_encoded_certificate_data(const char* filename,
     return ret_val;
 }
 
+static EVP_PKEY *read_private_key_pkcs11(const char *uri)
+{
+    char *key_pass;
+    ENGINE *e;
+
+    ENGINE_load_builtin_engines();
+    e = ENGINE_by_id("pkcs11");
+    if (!e)
+    {
+        fprintf(stderr, "Cannot Load PKCS#11 ENGINE\n");
+        return NULL;
+    }
+
+    if (!ENGINE_init(e))
+    {
+        fprintf(stderr, "Cannot ENGINE_init\n");
+        return NULL;
+    }
+
+    key_pass = getenv("CST_SIGN_PIN");
+    if (key_pass)
+        if (!ENGINE_ctrl_cmd_string(e, "PIN", key_pass, 0))
+        {
+            fprintf(stderr, "Cannot Set PKCS#11 PIN\n");
+            return NULL;
+        }
+
+    return ENGINE_load_private_key(e, uri, NULL, NULL);
+}
+
 /*--------------------------
   read_private_key
 ---------------------------*/
@@ -495,6 +575,11 @@ read_private_key(const char *filename, pem_password_cb *password_cb,
     const char *temp = filename + strlen(filename) -
                        PEM_FILE_EXTENSION_BYTES;
 
+    if (!strncmp(filename, "__ENV__", 7))
+        filename = getenv(filename + 7);
+    if (!strncmp(filename, "pkcs11:", 7))
+        return read_private_key_pkcs11(filename);
+
     /* Read Private key */
     private_key = BIO_new(BIO_s_file( ));
     if (!private_key)
diff --git a/code/back_end/src/pkey.c b/code/back_end/src/pkey.c
index 9ee5049..033954b 100644
--- a/code/back_end/src/pkey.c
+++ b/code/back_end/src/pkey.c
@@ -144,6 +144,10 @@ int32_t get_key_file(const char* cert_file, char* key_file)
                                          to filename length */
 
     strcpy(key_file, cert_file);
+
+    if (!strncmp(cert_file, "__ENV__", 7))
+        return CAL_SUCCESS;
+
     key_file[i] = 0;
 
     key_file[i-5] = 'y';
-- 
2.23.0

